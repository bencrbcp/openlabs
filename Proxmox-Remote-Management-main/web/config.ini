[users]
; there are two proposed solutions for user management
; 1. set up users in advance with puser command and don't allow registration
;   -> to disallow registration, comment out line register = true or set it to false
;   -> you may want to give users a generic password and force them to change it upon login
;      if so, set change_password to the generic password you provided your users
; 2. provide users with an access code and let them set their own username/password
;   -> make sure to include the line register = true
;   -> use access_code to set the access code
;   -> use registrant_groups to automatically add new users to a Proxmox group/groups

; whether or not to allow new users to register
register = true

; access code new users will need to provide in order to register
access_code = 'R0s!e1sa5py'

; Proxmox groups to add new users to
registrant_groups = 'Seminar'

; force any users with this password to change their password once they log in
;change_password = 'changeme'

; file to store credentials to when creating new user or changing a password
; uses puser -f file format
creds_file = 'creds.csv'

[environment]
; in any of the following options, you may:
; -> use the $USER wildcard in any string to specify the user's username
; -> use the $ID wildcard in any string to specify the instance's unique ID

; IDs of virtual machines to clone (ex: '7' '322,491' or '402,500-503')
; ***REQUIRED***
ids = '450-455'

; name prepended to virtual machine clones
; ***REQUIRED***
clone_name = '$USER'

; clones will be assigned the first available ID >= this number (ex. 500 or 600)
clone_begin_id = 500

; the type of clone to create (options are 'full' or 'linked')
clone_type = 'linked'

; name of initial snapshot created for each clone that users can revert to
; if not specified, users will not be provided with the option to revert
snapshot_name = 'initial'

; permissions (Proxmox roles) to assign to users for managing their cloned virtual machines
; default if not specified is PVEVMUser, which means users can access and interact with virtual machines
;roles = 'PVEVMAdmin'

; start cloned virtual machines automatically both on boot and after cloning/reverting
auto_start = true

; create a new Linux bridge for these virtual machines
; if set to false, comment out the remaining options in this section
create_bridge = true

; subnet for the new bridge, specified in CIDR notation
bridge_subnet = '192.168.$ID.0/24'

; attach ports/slaves to the new bridge (ex. 'eno1' or 'eno2')
;bridge_ports = 'eno1'

; add the new bridge to:
; - existing virtual machines -> specify ID of virtual machine
; - newly-created clones -> specify ID of template
bridged_vms = '400,402,450-452,454'

; assign (space-separated) static IP addresses using cloud-init (VM MUST have cloud-init installed):
; - existing virtual machines -> specify ID of virtual machine and IP in the format <ID>,<IP>
; - newly-created clones -> specify ID of template and IP in the format <ID>,<IP>
; ex. '500,10.0.$ID.2 402,10.0.$ID.3'
;cloud-init_static = '453,10.0.$ID.1 455,10.0.$ID.2'

; configure pfSense firewall to serve DHCP on newly-created bridge
; if set to false, comment out the remaining options in this section
firewall = true

; local IPv4 address of the pfSense firewall (acting as gateway)
; by default, this will be set to the subnet ending in .1 if not specified
;gateway_ip = '192.168.$ID.254'

; DHCP pool begin address
dhcp_begin = '192.168.$ID.10'

; DHCP pool end address
dhcp_end = '192.168.$ID.240'

; DNS servers to use for this subnet (space-separated) - served with DHCP
dhcp_dns = '1.1.1.1 8.8.8.8'

; assign (space-separated) IP addresses using DHCP (VMs MUST be added to the new bridge - see bridged_vms):
; - existing virtual machines -> specify ID of virtual machine and IP in the format <ID>,<IP>
; - newly-created clones -> specify ID of template and IP in the format <ID>,<IP>
; ex. '500,10.0.$ID.2 402,10.0.$ID.3'
dhcp_static = '402,192.168.$ID.254 450,192.168.$ID.2 451,192.168.$ID.3'

; the amount of time to wait for environment to be created before making it accessible
; in seconds
create_time = 80

; the amount of time to wait for environment to be reverted before making it accessible
; in seconds
revert_time = 10

; the amount of time to wait for environment to be destroyed before making it accessible
; in seconds
destroy_time = 20

[wildcards]
; if you wish to change the wildcard values, you may do so here
; do not remove these options

; wildcard used in the above options to specify the user's username
user = '$USER'
; wildcard used in the above options to specify the cloned instance's unique ID
id = '$ID'

[logging]
; IMPORTANT - ensure the web user (www-data) has write permission to the files you specify
; otherwise you'll run into errors

; file to log output from clone and purge command calls
; comment out for no logging
info_log = 'pweb.log'

; file to log errors from clone and purge command calls
; comment out for no logging
error_log = 'pweb_error.log'

[commands]
; command to use for cloning and purging
; this is useful if the clone and purge scripts are not in your path
; if you ran the setup script on Linux and said yes to adding these to your path, you can leave these as they are

; ex. clone = 'python /opt/scripts/clone.py'
clone = 'clone'
; ex. revert = 'python /opt/scripts/revert.py'
revert = 'revert'
; ex. purge = 'python /opt/scripts/purge.py'
purge = 'purge'

[authentication]
; these options were defined by the setup script
; they are for user management and creating sessions
; they are NOT used for the clone and purge commands
; it's recommended not to change these unless you modified your proxmox instance
; they are here for your convenience
proxmox_host = 'PROXMOXHOST'
proxmox_user = 'PROXMOXUSER'
proxmox_token_name = 'PROXMOXTNAME'
proxmox_token_value = 'PROXMOXTVAL'
proxmox_node = 'PROXMOXNODE'